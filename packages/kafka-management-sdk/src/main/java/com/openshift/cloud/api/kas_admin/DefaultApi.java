/*
 * Kafka Service Fleet Manager
 * Kafka Service Fleet Manager is a Rest API to manage Kakfa instances and connectors.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.kas_admin;

import com.openshift.cloud.api.kas_admin.invoker.ApiCallback;
import com.openshift.cloud.api.kas_admin.invoker.ApiClient;
import com.openshift.cloud.api.kas_admin.invoker.ApiException;
import com.openshift.cloud.api.kas_admin.invoker.ApiResponse;
import com.openshift.cloud.api.kas_admin.invoker.Configuration;
import com.openshift.cloud.api.kas_admin.invoker.Pair;
import com.openshift.cloud.api.kas_admin.invoker.ProgressRequestBody;
import com.openshift.cloud.api.kas_admin.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.openshift.cloud.api.kas_admin.models.CloudProviderList;
import com.openshift.cloud.api.kas_admin.models.CloudRegionList;
import com.openshift.cloud.api.kas_admin.models.Error;
import com.openshift.cloud.api.kas_admin.models.KafkaRequest;
import com.openshift.cloud.api.kas_admin.models.KafkaRequestList;
import com.openshift.cloud.api.kas_admin.models.KafkaRequestPayload;
import com.openshift.cloud.api.kas_admin.models.MetricsInstantQueryList;
import com.openshift.cloud.api.kas_admin.models.MetricsRangeQueryList;
import com.openshift.cloud.api.kas_admin.models.ServiceStatus;
import com.openshift.cloud.api.kas_admin.models.VersionMetadata;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createKafka
     * @param async Perform the action in an asynchronous manner (required)
     * @param kafkaRequestPayload Kafka data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict has been detected in the creation of this resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred while creating the Kafka request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKafkaCall(Boolean async, KafkaRequestPayload kafkaRequestPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = kafkaRequestPayload;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKafkaValidateBeforeCall(Boolean async, KafkaRequestPayload kafkaRequestPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'async' is set
        if (async == null) {
            throw new ApiException("Missing the required parameter 'async' when calling createKafka(Async)");
        }
        
        // verify the required parameter 'kafkaRequestPayload' is set
        if (kafkaRequestPayload == null) {
            throw new ApiException("Missing the required parameter 'kafkaRequestPayload' when calling createKafka(Async)");
        }
        

        okhttp3.Call localVarCall = createKafkaCall(async, kafkaRequestPayload, _callback);
        return localVarCall;

    }

    /**
     * Creates a Kakfa request
     * 
     * @param async Perform the action in an asynchronous manner (required)
     * @param kafkaRequestPayload Kafka data (required)
     * @return KafkaRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict has been detected in the creation of this resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred while creating the Kafka request </td><td>  -  </td></tr>
     </table>
     */
    public KafkaRequest createKafka(Boolean async, KafkaRequestPayload kafkaRequestPayload) throws ApiException {
        ApiResponse<KafkaRequest> localVarResp = createKafkaWithHttpInfo(async, kafkaRequestPayload);
        return localVarResp.getData();
    }

    /**
     * Creates a Kakfa request
     * 
     * @param async Perform the action in an asynchronous manner (required)
     * @param kafkaRequestPayload Kafka data (required)
     * @return ApiResponse&lt;KafkaRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict has been detected in the creation of this resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred while creating the Kafka request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KafkaRequest> createKafkaWithHttpInfo(Boolean async, KafkaRequestPayload kafkaRequestPayload) throws ApiException {
        okhttp3.Call localVarCall = createKafkaValidateBeforeCall(async, kafkaRequestPayload, null);
        Type localVarReturnType = new TypeToken<KafkaRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a Kakfa request (asynchronously)
     * 
     * @param async Perform the action in an asynchronous manner (required)
     * @param kafkaRequestPayload Kafka data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User forbidden either because the user is not authorized to access the service or because the maximum number of instances that can be created by this user has been reached. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource doesn&#39;t exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conflict has been detected in the creation of this resource </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected error occurred while creating the Kafka request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKafkaAsync(Boolean async, KafkaRequestPayload kafkaRequestPayload, final ApiCallback<KafkaRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKafkaValidateBeforeCall(async, kafkaRequestPayload, _callback);
        Type localVarReturnType = new TypeToken<KafkaRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKafkaById
     * @param id The ID of record (required)
     * @param async Perform the action in an asynchronous manner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKafkaByIdCall(String id, Boolean async, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKafkaByIdValidateBeforeCall(String id, Boolean async, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteKafkaById(Async)");
        }
        
        // verify the required parameter 'async' is set
        if (async == null) {
            throw new ApiException("Missing the required parameter 'async' when calling deleteKafkaById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteKafkaByIdCall(id, async, _callback);
        return localVarCall;

    }

    /**
     * Deletes a Kakfa request by ID
     * 
     * @param id The ID of record (required)
     * @param async Perform the action in an asynchronous manner (required)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Error deleteKafkaById(String id, Boolean async) throws ApiException {
        ApiResponse<Error> localVarResp = deleteKafkaByIdWithHttpInfo(id, async);
        return localVarResp.getData();
    }

    /**
     * Deletes a Kakfa request by ID
     * 
     * @param id The ID of record (required)
     * @param async Perform the action in an asynchronous manner (required)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Error> deleteKafkaByIdWithHttpInfo(String id, Boolean async) throws ApiException {
        okhttp3.Call localVarCall = deleteKafkaByIdValidateBeforeCall(id, async, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a Kakfa request by ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param async Perform the action in an asynchronous manner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation errors occurred </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKafkaByIdAsync(String id, Boolean async, final ApiCallback<Error> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKafkaByIdValidateBeforeCall(id, async, _callback);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudProviderRegions
     * @param id The ID of record (required)
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud provider regions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudProviderRegionsCall(String id, String page, String size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/cloud_providers/{id}/regions"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudProviderRegionsValidateBeforeCall(String id, String page, String size, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCloudProviderRegions(Async)");
        }
        

        okhttp3.Call localVarCall = getCloudProviderRegionsCall(id, page, size, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of supported regions of the supported cloud provider
     * 
     * @param id The ID of record (required)
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @return CloudRegionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud provider regions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public CloudRegionList getCloudProviderRegions(String id, String page, String size) throws ApiException {
        ApiResponse<CloudRegionList> localVarResp = getCloudProviderRegionsWithHttpInfo(id, page, size);
        return localVarResp.getData();
    }

    /**
     * Returns the list of supported regions of the supported cloud provider
     * 
     * @param id The ID of record (required)
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @return ApiResponse&lt;CloudRegionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud provider regions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudRegionList> getCloudProviderRegionsWithHttpInfo(String id, String page, String size) throws ApiException {
        okhttp3.Call localVarCall = getCloudProviderRegionsValidateBeforeCall(id, page, size, null);
        Type localVarReturnType = new TypeToken<CloudRegionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of supported regions of the supported cloud provider (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud provider regions </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudProviderRegionsAsync(String id, String page, String size, final ApiCallback<CloudRegionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudProviderRegionsValidateBeforeCall(id, page, size, _callback);
        Type localVarReturnType = new TypeToken<CloudRegionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCloudProviders
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudProvidersCall(String page, String size, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/cloud_providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudProvidersValidateBeforeCall(String page, String size, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCloudProvidersCall(page, size, _callback);
        return localVarCall;

    }

    /**
     * Returns the list of supported cloud providers
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @return CloudProviderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public CloudProviderList getCloudProviders(String page, String size) throws ApiException {
        ApiResponse<CloudProviderList> localVarResp = getCloudProvidersWithHttpInfo(page, size);
        return localVarResp.getData();
    }

    /**
     * Returns the list of supported cloud providers
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @return ApiResponse&lt;CloudProviderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CloudProviderList> getCloudProvidersWithHttpInfo(String page, String size) throws ApiException {
        okhttp3.Call localVarCall = getCloudProvidersValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<CloudProviderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of supported cloud providers (asynchronously)
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of supported cloud providers </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCloudProvidersAsync(String page, String size, final ApiCallback<CloudProviderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCloudProvidersValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<CloudProviderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKafkaById
     * @param id The ID of record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kafka request found by ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKafkaByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKafkaByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getKafkaById(Async)");
        }
        

        okhttp3.Call localVarCall = getKafkaByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Returns a Kakfa request by ID
     * 
     * @param id The ID of record (required)
     * @return KafkaRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kafka request found by ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public KafkaRequest getKafkaById(String id) throws ApiException {
        ApiResponse<KafkaRequest> localVarResp = getKafkaByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returns a Kakfa request by ID
     * 
     * @param id The ID of record (required)
     * @return ApiResponse&lt;KafkaRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kafka request found by ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KafkaRequest> getKafkaByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getKafkaByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KafkaRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a Kakfa request by ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kafka request found by ID </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No Kakfa request with specified ID exists </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKafkaByIdAsync(String id, final ApiCallback<KafkaRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKafkaByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KafkaRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKafkas
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kakfa instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kakfa instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
     * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kakfa instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kakfa instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Kakfa instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Kafka requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKafkasCall(String page, String size, String orderBy, String search, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKafkasValidateBeforeCall(String page, String size, String orderBy, String search, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getKafkasCall(page, size, orderBy, search, _callback);
        return localVarCall;

    }

    /**
     * Returns a list of Kafka requests
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kakfa instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kakfa instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
     * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kakfa instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kakfa instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Kakfa instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
     * @return KafkaRequestList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Kafka requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public KafkaRequestList getKafkas(String page, String size, String orderBy, String search) throws ApiException {
        ApiResponse<KafkaRequestList> localVarResp = getKafkasWithHttpInfo(page, size, orderBy, search);
        return localVarResp.getData();
    }

    /**
     * Returns a list of Kafka requests
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kakfa instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kakfa instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
     * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kakfa instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kakfa instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Kakfa instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
     * @return ApiResponse&lt;KafkaRequestList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Kafka requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KafkaRequestList> getKafkasWithHttpInfo(String page, String size, String orderBy, String search) throws ApiException {
        okhttp3.Call localVarCall = getKafkasValidateBeforeCall(page, size, orderBy, search, null);
        Type localVarReturnType = new TypeToken<KafkaRequestList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of Kafka requests (asynchronously)
     * 
     * @param page Page index (optional)
     * @param size Number of items in each page (optional)
     * @param orderBy Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the &#x60;order by&#x60; clause of an SQL statement. Each query can be ordered by any of the &#x60;kafkaRequests&#x60; fields. For example, to return all Kakfa instances ordered by their name, use the following syntax:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  To return all Kakfa instances ordered by their name _and_ created date, use the following syntax:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then the results are ordered by name. (optional)
     * @param search Search criteria.  The syntax of this parameter is similar to the syntax of the &#x60;where&#x60; clause of an SQL statement. Allowed fields in the search are &#x60;cloud_provider&#x60;, &#x60;name&#x60;, &#x60;owner&#x60;, &#x60;region&#x60;, and &#x60;status&#x60;. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60;, or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;. However, you can use a maximum of 10 joins in a search query.  Examples:  To return a Kakfa instance with the name &#x60;my-kafka&#x60; and the region &#x60;aws&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;[p-]  To return a Kakfa instance with a name that starts with &#x60;my&#x60;, use the following syntax:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn&#39;t provided, or if the value is empty, then all the Kakfa instances that the user has permission to see are returned.  Note. If the query is invalid, an error is returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Kafka requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKafkasAsync(String page, String size, String orderBy, String search, final ApiCallback<KafkaRequestList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKafkasValidateBeforeCall(page, size, orderBy, search, _callback);
        Type localVarReturnType = new TypeToken<KafkaRequestList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetricsByInstantQuery
     * @param id The ID of record (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricsByInstantQueryCall(String id, List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetricsByInstantQueryValidateBeforeCall(String id, List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMetricsByInstantQuery(Async)");
        }
        

        okhttp3.Call localVarCall = getMetricsByInstantQueryCall(id, filters, _callback);
        return localVarCall;

    }

    /**
     * Returns metrics with instant query by Kakfa ID
     * 
     * @param id The ID of record (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @return MetricsInstantQueryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public MetricsInstantQueryList getMetricsByInstantQuery(String id, List<String> filters) throws ApiException {
        ApiResponse<MetricsInstantQueryList> localVarResp = getMetricsByInstantQueryWithHttpInfo(id, filters);
        return localVarResp.getData();
    }

    /**
     * Returns metrics with instant query by Kakfa ID
     * 
     * @param id The ID of record (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @return ApiResponse&lt;MetricsInstantQueryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsInstantQueryList> getMetricsByInstantQueryWithHttpInfo(String id, List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getMetricsByInstantQueryValidateBeforeCall(id, filters, null);
        Type localVarReturnType = new TypeToken<MetricsInstantQueryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns metrics with instant query by Kakfa ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricsByInstantQueryAsync(String id, List<String> filters, final ApiCallback<MetricsInstantQueryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetricsByInstantQueryValidateBeforeCall(id, filters, _callback);
        Type localVarReturnType = new TypeToken<MetricsInstantQueryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetricsByRangeQuery
     * @param id The ID of record (required)
     * @param duration The length of time in minutes for which to return the metrics (required)
     * @param interval The interval in seconds between data points (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricsByRangeQueryCall(String id, Long duration, Long interval, List<String> filters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filters", filters));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetricsByRangeQueryValidateBeforeCall(String id, Long duration, Long interval, List<String> filters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMetricsByRangeQuery(Async)");
        }
        
        // verify the required parameter 'duration' is set
        if (duration == null) {
            throw new ApiException("Missing the required parameter 'duration' when calling getMetricsByRangeQuery(Async)");
        }
        
        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling getMetricsByRangeQuery(Async)");
        }
        

        okhttp3.Call localVarCall = getMetricsByRangeQueryCall(id, duration, interval, filters, _callback);
        return localVarCall;

    }

    /**
     * Returns metrics with timeseries range query by Kakfa ID
     * 
     * @param id The ID of record (required)
     * @param duration The length of time in minutes for which to return the metrics (required)
     * @param interval The interval in seconds between data points (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @return MetricsRangeQueryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public MetricsRangeQueryList getMetricsByRangeQuery(String id, Long duration, Long interval, List<String> filters) throws ApiException {
        ApiResponse<MetricsRangeQueryList> localVarResp = getMetricsByRangeQueryWithHttpInfo(id, duration, interval, filters);
        return localVarResp.getData();
    }

    /**
     * Returns metrics with timeseries range query by Kakfa ID
     * 
     * @param id The ID of record (required)
     * @param duration The length of time in minutes for which to return the metrics (required)
     * @param interval The interval in seconds between data points (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @return ApiResponse&lt;MetricsRangeQueryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsRangeQueryList> getMetricsByRangeQueryWithHttpInfo(String id, Long duration, Long interval, List<String> filters) throws ApiException {
        okhttp3.Call localVarCall = getMetricsByRangeQueryValidateBeforeCall(id, duration, interval, filters, null);
        Type localVarReturnType = new TypeToken<MetricsRangeQueryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns metrics with timeseries range query by Kakfa ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param duration The length of time in minutes for which to return the metrics (required)
     * @param interval The interval in seconds between data points (required)
     * @param filters List of metrics to fetch. Fetch all metrics when empty. List entries are Kakfa internal metric names. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned JSON array of Prometheus metrics objects from observatorium </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMetricsByRangeQueryAsync(String id, Long duration, Long interval, List<String> filters, final ApiCallback<MetricsRangeQueryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetricsByRangeQueryValidateBeforeCall(id, duration, interval, filters, _callback);
        Type localVarReturnType = new TypeToken<MetricsRangeQueryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceStatusCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getServiceStatusCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the status of resources, such as whether maximum service capacity has been reached
     * 
     * @return ServiceStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ServiceStatus getServiceStatus() throws ApiException {
        ApiResponse<ServiceStatus> localVarResp = getServiceStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the status of resources, such as whether maximum service capacity has been reached
     * 
     * @return ApiResponse&lt;ServiceStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceStatus> getServiceStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServiceStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the status of resources, such as whether maximum service capacity has been reached (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceStatusAsync(final ApiCallback<ServiceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVersionMetadata
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version metadata </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionMetadataCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionMetadataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getVersionMetadataCall(_callback);
        return localVarCall;

    }

    /**
     * Returns the version metadata
     * 
     * @return VersionMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version metadata </td><td>  -  </td></tr>
     </table>
     */
    public VersionMetadata getVersionMetadata() throws ApiException {
        ApiResponse<VersionMetadata> localVarResp = getVersionMetadataWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns the version metadata
     * 
     * @return ApiResponse&lt;VersionMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version metadata </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionMetadata> getVersionMetadataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getVersionMetadataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<VersionMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the version metadata (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version metadata </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVersionMetadataAsync(final ApiCallback<VersionMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionMetadataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<VersionMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
