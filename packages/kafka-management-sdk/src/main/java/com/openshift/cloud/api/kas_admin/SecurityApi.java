/*
 * Kafka Service Fleet Manager
 * Kafka Service Fleet Manager is a Rest API to manage Kakfa instances and connectors.
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.kas_admin;

import com.openshift.cloud.api.kas_admin.invoker.ApiCallback;
import com.openshift.cloud.api.kas_admin.invoker.ApiClient;
import com.openshift.cloud.api.kas_admin.invoker.ApiException;
import com.openshift.cloud.api.kas_admin.invoker.ApiResponse;
import com.openshift.cloud.api.kas_admin.invoker.Configuration;
import com.openshift.cloud.api.kas_admin.invoker.Pair;
import com.openshift.cloud.api.kas_admin.invoker.ProgressRequestBody;
import com.openshift.cloud.api.kas_admin.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.openshift.cloud.api.kas_admin.models.Error;
import com.openshift.cloud.api.kas_admin.models.ServiceAccount;
import com.openshift.cloud.api.kas_admin.models.ServiceAccountList;
import com.openshift.cloud.api.kas_admin.models.ServiceAccountRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityApi {
    private ApiClient localVarApiClient;

    public SecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createServiceAccount
     * @param serviceAccountRequest Service account request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> List of service accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAccountCall(ServiceAccountRequest serviceAccountRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = serviceAccountRequest;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/service_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceAccountValidateBeforeCall(ServiceAccountRequest serviceAccountRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'serviceAccountRequest' is set
        if (serviceAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'serviceAccountRequest' when calling createServiceAccount(Async)");
        }
        

        okhttp3.Call localVarCall = createServiceAccountCall(serviceAccountRequest, _callback);
        return localVarCall;

    }

    /**
     * Creates a service account
     * 
     * @param serviceAccountRequest Service account request (required)
     * @return ServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> List of service accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAccount createServiceAccount(ServiceAccountRequest serviceAccountRequest) throws ApiException {
        ApiResponse<ServiceAccount> localVarResp = createServiceAccountWithHttpInfo(serviceAccountRequest);
        return localVarResp.getData();
    }

    /**
     * Creates a service account
     * 
     * @param serviceAccountRequest Service account request (required)
     * @return ApiResponse&lt;ServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> List of service accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAccount> createServiceAccountWithHttpInfo(ServiceAccountRequest serviceAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createServiceAccountValidateBeforeCall(serviceAccountRequest, null);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a service account (asynchronously)
     * 
     * @param serviceAccountRequest Service account request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service account created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> List of service accounts </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAccountAsync(ServiceAccountRequest serviceAccountRequest, final ApiCallback<ServiceAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceAccountValidateBeforeCall(serviceAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServiceAccountById
     * @param id The ID of record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAccountByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/service_accounts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceAccountByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteServiceAccountById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteServiceAccountByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Deletes a service account by ID
     * 
     * @param id The ID of record (required)
     * @return Error
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public Error deleteServiceAccountById(String id) throws ApiException {
        ApiResponse<Error> localVarResp = deleteServiceAccountByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Deletes a service account by ID
     * 
     * @param id The ID of record (required)
     * @return ApiResponse&lt;Error&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Error> deleteServiceAccountByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceAccountByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a service account by ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAccountByIdAsync(String id, final ApiCallback<Error> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceAccountByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Error>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceAccountById
     * @param id The ID of record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a service account by ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAccountByIdCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/service_accounts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceAccountByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getServiceAccountById(Async)");
        }
        

        okhttp3.Call localVarCall = getServiceAccountByIdCall(id, _callback);
        return localVarCall;

    }

    /**
     * Returned service account by ID
     * 
     * @param id The ID of record (required)
     * @return ServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a service account by ID </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAccount getServiceAccountById(String id) throws ApiException {
        ApiResponse<ServiceAccount> localVarResp = getServiceAccountByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Returned service account by ID
     * 
     * @param id The ID of record (required)
     * @return ApiResponse&lt;ServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a service account by ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAccount> getServiceAccountByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getServiceAccountByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returned service account by ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a service account by ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAccountByIdAsync(String id, final ApiCallback<ServiceAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceAccountByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServiceAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of service accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAccountsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/service_accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getServiceAccountsCall(_callback);
        return localVarCall;

    }

    /**
     * Returns a list of service accounts
     * 
     * @return ServiceAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of service accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAccountList getServiceAccounts() throws ApiException {
        ApiResponse<ServiceAccountList> localVarResp = getServiceAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of service accounts
     * 
     * @return ApiResponse&lt;ServiceAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of service accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAccountList> getServiceAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServiceAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ServiceAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of service accounts (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned list of service accounts </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAccountsAsync(final ApiCallback<ServiceAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ServiceAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetServiceAccountCreds
     * @param id The ID of record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset credentials </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetServiceAccountCredsCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/kafkas_mgmt/v1/service_accounts/{id}/reset_credentials"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetServiceAccountCredsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetServiceAccountCreds(Async)");
        }
        

        okhttp3.Call localVarCall = resetServiceAccountCredsCall(id, _callback);
        return localVarCall;

    }

    /**
     * Resets the credentials for a service account by ID
     * 
     * @param id The ID of record (required)
     * @return ServiceAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset credentials </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ServiceAccount resetServiceAccountCreds(String id) throws ApiException {
        ApiResponse<ServiceAccount> localVarResp = resetServiceAccountCredsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Resets the credentials for a service account by ID
     * 
     * @param id The ID of record (required)
     * @return ApiResponse&lt;ServiceAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset credentials </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceAccount> resetServiceAccountCredsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = resetServiceAccountCredsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resets the credentials for a service account by ID (asynchronously)
     * 
     * @param id The ID of record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reset credentials </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Auth token is invalid </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User not authorized to access the service </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetServiceAccountCredsAsync(String id, final ApiCallback<ServiceAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetServiceAccountCredsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ServiceAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
