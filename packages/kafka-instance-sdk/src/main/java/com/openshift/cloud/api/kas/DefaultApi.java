/*
 * Kafka Admin REST API
 * An API to provide REST endpoints for query Kafka for admin operations
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.kas;

import com.openshift.cloud.api.kas.invoker.ApiCallback;
import com.openshift.cloud.api.kas.invoker.ApiClient;
import com.openshift.cloud.api.kas.invoker.ApiException;
import com.openshift.cloud.api.kas.invoker.ApiResponse;
import com.openshift.cloud.api.kas.invoker.Configuration;
import com.openshift.cloud.api.kas.invoker.Pair;
import com.openshift.cloud.api.kas.invoker.ProgressRequestBody;
import com.openshift.cloud.api.kas.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.openshift.cloud.api.kas.models.ConsumerGroup;
import com.openshift.cloud.api.kas.models.ConsumerGroupList;
import com.openshift.cloud.api.kas.models.NewTopicInput;
import com.openshift.cloud.api.kas.models.Topic;
import com.openshift.cloud.api.kas.models.TopicsList;
import com.openshift.cloud.api.kas.models.UpdateTopicInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createTopic
     * @param newTopicInput Topic to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Entry already exisits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicCall(NewTopicInput newTopicInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = newTopicInput;

        // create path and map variables
        String localVarPath = "/topics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicValidateBeforeCall(NewTopicInput newTopicInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newTopicInput' is set
        if (newTopicInput == null) {
            throw new ApiException("Missing the required parameter 'newTopicInput' when calling createTopic(Async)");
        }
        

        okhttp3.Call localVarCall = createTopicCall(newTopicInput, _callback);
        return localVarCall;

    }

    /**
     * Creates a new topic
     * Creates a new topic for Kafka.
     * @param newTopicInput Topic to create. (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Entry already exisits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public Topic createTopic(NewTopicInput newTopicInput) throws ApiException {
        ApiResponse<Topic> localVarResp = createTopicWithHttpInfo(newTopicInput);
        return localVarResp.getData();
    }

    /**
     * Creates a new topic
     * Creates a new topic for Kafka.
     * @param newTopicInput Topic to create. (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Entry already exisits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> createTopicWithHttpInfo(NewTopicInput newTopicInput) throws ApiException {
        okhttp3.Call localVarCall = createTopicValidateBeforeCall(newTopicInput, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new topic (asynchronously)
     * Creates a new topic for Kafka.
     * @param newTopicInput Topic to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, Unable to create topic. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Entry already exisits </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTopicAsync(NewTopicInput newTopicInput, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicValidateBeforeCall(newTopicInput, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConsumerGroupById
     * @param consumerGroupId The unique ID of the cobsumer group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The consumer group was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to delete this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The consumer group does not exist. </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> User cannot delete consumer group with active members. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConsumerGroupByIdCall(String consumerGroupId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer-groups/{consumerGroupId}"
            .replaceAll("\\{" + "consumerGroupId" + "\\}", localVarApiClient.escapeString(consumerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConsumerGroupByIdValidateBeforeCall(String consumerGroupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consumerGroupId' is set
        if (consumerGroupId == null) {
            throw new ApiException("Missing the required parameter 'consumerGroupId' when calling deleteConsumerGroupById(Async)");
        }
        

        okhttp3.Call localVarCall = deleteConsumerGroupByIdCall(consumerGroupId, _callback);
        return localVarCall;

    }

    /**
     * Delete a consumer group.
     * Delete a consumer group, along with its consumers.
     * @param consumerGroupId The unique ID of the cobsumer group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The consumer group was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to delete this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The consumer group does not exist. </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> User cannot delete consumer group with active members. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteConsumerGroupById(String consumerGroupId) throws ApiException {
        deleteConsumerGroupByIdWithHttpInfo(consumerGroupId);
    }

    /**
     * Delete a consumer group.
     * Delete a consumer group, along with its consumers.
     * @param consumerGroupId The unique ID of the cobsumer group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The consumer group was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to delete this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The consumer group does not exist. </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> User cannot delete consumer group with active members. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteConsumerGroupByIdWithHttpInfo(String consumerGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteConsumerGroupByIdValidateBeforeCall(consumerGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a consumer group. (asynchronously)
     * Delete a consumer group, along with its consumers.
     * @param consumerGroupId The unique ID of the cobsumer group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The consumer group was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to delete this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The consumer group does not exist. </td><td>  -  </td></tr>
        <tr><td> 423 </td><td> User cannot delete consumer group with active members. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConsumerGroupByIdAsync(String consumerGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConsumerGroupByIdValidateBeforeCall(consumerGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTopic
     * @param topicName The topic name to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unathorized, unable to delete topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTopicCall(String topicName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics/{topicName}"
            .replaceAll("\\{" + "topicName" + "\\}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTopicValidateBeforeCall(String topicName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling deleteTopic(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTopicCall(topicName, _callback);
        return localVarCall;

    }

    /**
     * Deletes a  topic
     * Deletes the topic with the specified name.
     * @param topicName The topic name to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unathorized, unable to delete topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTopic(String topicName) throws ApiException {
        deleteTopicWithHttpInfo(topicName);
    }

    /**
     * Deletes a  topic
     * Deletes the topic with the specified name.
     * @param topicName The topic name to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unathorized, unable to delete topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTopicWithHttpInfo(String topicName) throws ApiException {
        okhttp3.Call localVarCall = deleteTopicValidateBeforeCall(topicName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a  topic (asynchronously)
     * Deletes the topic with the specified name.
     * @param topicName The topic name to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unathorized, unable to delete topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTopicAsync(String topicName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTopicValidateBeforeCall(topicName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsumerGroupById
     * @param consumerGroupId The unique ID of the consumer group (required)
     * @param topic Filter consumer groups for a specific topic (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden this view this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Consumer group not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerGroupByIdCall(String consumerGroupId, String topic, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer-groups/{consumerGroupId}"
            .replaceAll("\\{" + "consumerGroupId" + "\\}", localVarApiClient.escapeString(consumerGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic", topic));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsumerGroupByIdValidateBeforeCall(String consumerGroupId, String topic, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'consumerGroupId' is set
        if (consumerGroupId == null) {
            throw new ApiException("Missing the required parameter 'consumerGroupId' when calling getConsumerGroupById(Async)");
        }
        

        okhttp3.Call localVarCall = getConsumerGroupByIdCall(consumerGroupId, topic, _callback);
        return localVarCall;

    }

    /**
     * Get a single consumer group by its unique ID.
     * 
     * @param consumerGroupId The unique ID of the consumer group (required)
     * @param topic Filter consumer groups for a specific topic (optional)
     * @return ConsumerGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden this view this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Consumer group not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ConsumerGroup getConsumerGroupById(String consumerGroupId, String topic) throws ApiException {
        ApiResponse<ConsumerGroup> localVarResp = getConsumerGroupByIdWithHttpInfo(consumerGroupId, topic);
        return localVarResp.getData();
    }

    /**
     * Get a single consumer group by its unique ID.
     * 
     * @param consumerGroupId The unique ID of the consumer group (required)
     * @param topic Filter consumer groups for a specific topic (optional)
     * @return ApiResponse&lt;ConsumerGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden this view this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Consumer group not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsumerGroup> getConsumerGroupByIdWithHttpInfo(String consumerGroupId, String topic) throws ApiException {
        okhttp3.Call localVarCall = getConsumerGroupByIdValidateBeforeCall(consumerGroupId, topic, null);
        Type localVarReturnType = new TypeToken<ConsumerGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single consumer group by its unique ID. (asynchronously)
     * 
     * @param consumerGroupId The unique ID of the consumer group (required)
     * @param topic Filter consumer groups for a specific topic (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Consumer group details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden this view this consumer group. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Consumer group not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerGroupByIdAsync(String consumerGroupId, String topic, final ApiCallback<ConsumerGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsumerGroupByIdValidateBeforeCall(consumerGroupId, topic, _callback);
        Type localVarReturnType = new TypeToken<ConsumerGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConsumerGroups
     * @param limit Maximum number of consumer groups to returnd (optional)
     * @param offset The page offset when returning the list of consumer groups (optional)
     * @param topic Return consumer groups for this topic (optional)
     * @param groupIdFilter Return the consumer groups where the ID begins with this value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of consumer groups matching the request parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot or will not process the request due to something that is perceived to be a client error such as malformed request syntax. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden to retrieve the list of consumer groups. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerGroupsCall(Integer limit, Integer offset, String topic, String groupIdFilter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consumer-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (topic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic", topic));
        }

        if (groupIdFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group-id-filter", groupIdFilter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsumerGroupsValidateBeforeCall(Integer limit, Integer offset, String topic, String groupIdFilter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getConsumerGroupsCall(limit, offset, topic, groupIdFilter, _callback);
        return localVarCall;

    }

    /**
     * List of consumer groups in the Kafka instance.
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @param limit Maximum number of consumer groups to returnd (optional)
     * @param offset The page offset when returning the list of consumer groups (optional)
     * @param topic Return consumer groups for this topic (optional)
     * @param groupIdFilter Return the consumer groups where the ID begins with this value (optional)
     * @return ConsumerGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of consumer groups matching the request parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot or will not process the request due to something that is perceived to be a client error such as malformed request syntax. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden to retrieve the list of consumer groups. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ConsumerGroupList getConsumerGroups(Integer limit, Integer offset, String topic, String groupIdFilter) throws ApiException {
        ApiResponse<ConsumerGroupList> localVarResp = getConsumerGroupsWithHttpInfo(limit, offset, topic, groupIdFilter);
        return localVarResp.getData();
    }

    /**
     * List of consumer groups in the Kafka instance.
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @param limit Maximum number of consumer groups to returnd (optional)
     * @param offset The page offset when returning the list of consumer groups (optional)
     * @param topic Return consumer groups for this topic (optional)
     * @param groupIdFilter Return the consumer groups where the ID begins with this value (optional)
     * @return ApiResponse&lt;ConsumerGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of consumer groups matching the request parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot or will not process the request due to something that is perceived to be a client error such as malformed request syntax. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden to retrieve the list of consumer groups. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsumerGroupList> getConsumerGroupsWithHttpInfo(Integer limit, Integer offset, String topic, String groupIdFilter) throws ApiException {
        okhttp3.Call localVarCall = getConsumerGroupsValidateBeforeCall(limit, offset, topic, groupIdFilter, null);
        Type localVarReturnType = new TypeToken<ConsumerGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of consumer groups in the Kafka instance. (asynchronously)
     * Returns a list of all consumer groups for a particular Kafka instance.
     * @param limit Maximum number of consumer groups to returnd (optional)
     * @param offset The page offset when returning the list of consumer groups (optional)
     * @param topic Return consumer groups for this topic (optional)
     * @param groupIdFilter Return the consumer groups where the ID begins with this value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of consumer groups matching the request parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server cannot or will not process the request due to something that is perceived to be a client error such as malformed request syntax. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, request has not been applied because it lacks valid authentication credentials. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User is forbidden to retrieve the list of consumer groups. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConsumerGroupsAsync(Integer limit, Integer offset, String topic, String groupIdFilter, final ApiCallback<ConsumerGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsumerGroupsValidateBeforeCall(limit, offset, topic, groupIdFilter, _callback);
        Type localVarReturnType = new TypeToken<ConsumerGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopic
     * @param topicName The topic name to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kakfa topic details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrieve topics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicCall(String topicName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics/{topicName}"
            .replaceAll("\\{" + "topicName" + "\\}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopicValidateBeforeCall(String topicName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling getTopic(Async)");
        }
        

        okhttp3.Call localVarCall = getTopicCall(topicName, _callback);
        return localVarCall;

    }

    /**
     * Retrieves the topic with the specified name.
     * Topic
     * @param topicName The topic name to retrieve. (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kakfa topic details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrieve topics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public Topic getTopic(String topicName) throws ApiException {
        ApiResponse<Topic> localVarResp = getTopicWithHttpInfo(topicName);
        return localVarResp.getData();
    }

    /**
     * Retrieves the topic with the specified name.
     * Topic
     * @param topicName The topic name to retrieve. (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kakfa topic details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrieve topics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> getTopicWithHttpInfo(String topicName) throws ApiException {
        okhttp3.Call localVarCall = getTopicValidateBeforeCall(topicName, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the topic with the specified name. (asynchronously)
     * Topic
     * @param topicName The topic name to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Kakfa topic details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrieve topics. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicAsync(String topicName, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopicValidateBeforeCall(topicName, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTopics
     * @param limit Maximum number of topics to return (optional)
     * @param filter Filter to apply when returning the list of topics (optional)
     * @param offset The page offset when returning the limit of requested topics. (optional)
     * @param order Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of topics matching the users query paramters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to retreive topics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrive topics. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicsCall(Integer limit, String filter, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopicsValidateBeforeCall(Integer limit, String filter, Integer offset, String order, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTopicsCall(limit, filter, offset, order, _callback);
        return localVarCall;

    }

    /**
     * List of topics
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @param limit Maximum number of topics to return (optional)
     * @param filter Filter to apply when returning the list of topics (optional)
     * @param offset The page offset when returning the limit of requested topics. (optional)
     * @param order Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise. (optional)
     * @return TopicsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of topics matching the users query paramters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to retreive topics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrive topics. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public TopicsList getTopics(Integer limit, String filter, Integer offset, String order) throws ApiException {
        ApiResponse<TopicsList> localVarResp = getTopicsWithHttpInfo(limit, filter, offset, order);
        return localVarResp.getData();
    }

    /**
     * List of topics
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @param limit Maximum number of topics to return (optional)
     * @param filter Filter to apply when returning the list of topics (optional)
     * @param offset The page offset when returning the limit of requested topics. (optional)
     * @param order Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise. (optional)
     * @return ApiResponse&lt;TopicsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of topics matching the users query paramters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to retreive topics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrive topics. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicsList> getTopicsWithHttpInfo(Integer limit, String filter, Integer offset, String order) throws ApiException {
        okhttp3.Call localVarCall = getTopicsValidateBeforeCall(limit, filter, offset, order, null);
        Type localVarReturnType = new TypeToken<TopicsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of topics (asynchronously)
     * Returns a list of all of the available topics, or the list of topics that meet the users URL Query Parameters.
     * @param limit Maximum number of topics to return (optional)
     * @param filter Filter to apply when returning the list of topics (optional)
     * @param offset The page offset when returning the limit of requested topics. (optional)
     * @param order Order of the items sorting. If \&quot;asc\&quot; is set as a value, ascending order is used, descending otherwise. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of topics matching the users query paramters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to retreive topics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized, unable to retrive topics. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTopicsAsync(Integer limit, String filter, Integer offset, String order, final ApiCallback<TopicsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopicsValidateBeforeCall(limit, filter, offset, order, _callback);
        Type localVarReturnType = new TypeToken<TopicsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopic
     * @param topicName The topic name which is its unique id. (required)
     * @param updateTopicInput  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthroized, unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicCall(String topicName, UpdateTopicInput updateTopicInput, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateTopicInput;

        // create path and map variables
        String localVarPath = "/topics/{topicName}"
            .replaceAll("\\{" + "topicName" + "\\}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicValidateBeforeCall(String topicName, UpdateTopicInput updateTopicInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling updateTopic(Async)");
        }
        
        // verify the required parameter 'updateTopicInput' is set
        if (updateTopicInput == null) {
            throw new ApiException("Missing the required parameter 'updateTopicInput' when calling updateTopic(Async)");
        }
        

        okhttp3.Call localVarCall = updateTopicCall(topicName, updateTopicInput, _callback);
        return localVarCall;

    }

    /**
     * Updates the topic with the specified name.
     * updates the topic with the new data.
     * @param topicName The topic name which is its unique id. (required)
     * @param updateTopicInput  (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthroized, unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public Topic updateTopic(String topicName, UpdateTopicInput updateTopicInput) throws ApiException {
        ApiResponse<Topic> localVarResp = updateTopicWithHttpInfo(topicName, updateTopicInput);
        return localVarResp.getData();
    }

    /**
     * Updates the topic with the specified name.
     * updates the topic with the new data.
     * @param topicName The topic name which is its unique id. (required)
     * @param updateTopicInput  (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthroized, unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> updateTopicWithHttpInfo(String topicName, UpdateTopicInput updateTopicInput) throws ApiException {
        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(topicName, updateTopicInput, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the topic with the specified name. (asynchronously)
     * updates the topic with the new data.
     * @param topicName The topic name which is its unique id. (required)
     * @param updateTopicInput  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic updated successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthroized, unable to update topic. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Topic not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Unable to connect to the Kafka cluster. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicAsync(String topicName, UpdateTopicInput updateTopicInput, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicValidateBeforeCall(topicName, updateTopicInput, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
