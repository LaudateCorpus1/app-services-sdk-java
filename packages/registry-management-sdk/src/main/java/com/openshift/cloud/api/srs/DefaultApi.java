/*
 * Service Registry Service - Fleet Manager - v1
 * Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.srs;

import com.openshift.cloud.api.srs.invoker.ApiCallback;
import com.openshift.cloud.api.srs.invoker.ApiClient;
import com.openshift.cloud.api.srs.invoker.ApiException;
import com.openshift.cloud.api.srs.invoker.ApiResponse;
import com.openshift.cloud.api.srs.invoker.Configuration;
import com.openshift.cloud.api.srs.invoker.Pair;
import com.openshift.cloud.api.srs.invoker.ProgressRequestBody;
import com.openshift.cloud.api.srs.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.openshift.cloud.api.srs.models.ErrorInfo1;
import com.openshift.cloud.api.srs.models.Registry;
import com.openshift.cloud.api.srs.models.RegistryCreate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createRegistry
     * @param registryCreate A new &#x60;Registry&#x60; to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response. The full request to create a new &#x60;Registry&#x60; is processed asynchronously. User should verify the result of the operation by reading the &#x60;status&#x60; property of the created &#x60;Registry&#x60; entity. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistryCall(RegistryCreate registryCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = registryCreate;

        // create path and map variables
        String localVarPath = "/api/serviceregistry_mgmt/v1/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRegistryValidateBeforeCall(RegistryCreate registryCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registryCreate' is set
        if (registryCreate == null) {
            throw new ApiException("Missing the required parameter 'registryCreate' when calling createRegistry(Async)");
        }
        

        okhttp3.Call localVarCall = createRegistryCall(registryCreate, _callback);
        return localVarCall;

    }

    /**
     * Create a Registry.
     * 
     * @param registryCreate A new &#x60;Registry&#x60; to be created. (required)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response. The full request to create a new &#x60;Registry&#x60; is processed asynchronously. User should verify the result of the operation by reading the &#x60;status&#x60; property of the created &#x60;Registry&#x60; entity. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public Registry createRegistry(RegistryCreate registryCreate) throws ApiException {
        ApiResponse<Registry> localVarResp = createRegistryWithHttpInfo(registryCreate);
        return localVarResp.getData();
    }

    /**
     * Create a Registry.
     * 
     * @param registryCreate A new &#x60;Registry&#x60; to be created. (required)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response. The full request to create a new &#x60;Registry&#x60; is processed asynchronously. User should verify the result of the operation by reading the &#x60;status&#x60; property of the created &#x60;Registry&#x60; entity. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registry> createRegistryWithHttpInfo(RegistryCreate registryCreate) throws ApiException {
        okhttp3.Call localVarCall = createRegistryValidateBeforeCall(registryCreate, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Registry. (asynchronously)
     * 
     * @param registryCreate A new &#x60;Registry&#x60; to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A successful response. The full request to create a new &#x60;Registry&#x60; is processed asynchronously. User should verify the result of the operation by reading the &#x60;status&#x60; property of the created &#x60;Registry&#x60; entity. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRegistryAsync(RegistryCreate registryCreate, final ApiCallback<Registry> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRegistryValidateBeforeCall(registryCreate, _callback);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRegistry
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistryCall(String registryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/serviceregistry_mgmt/v1/registries/{registryId}"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRegistryValidateBeforeCall(String registryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling deleteRegistry(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRegistryCall(registryId, _callback);
        return localVarCall;

    }

    /**
     * Delete a Registry
     * Deletes an existing &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRegistry(String registryId) throws ApiException {
        deleteRegistryWithHttpInfo(registryId);
    }

    /**
     * Delete a Registry
     * Deletes an existing &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRegistryWithHttpInfo(String registryId) throws ApiException {
        okhttp3.Call localVarCall = deleteRegistryValidateBeforeCall(registryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Registry (asynchronously)
     * Deletes an existing &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRegistryAsync(String registryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRegistryValidateBeforeCall(registryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistriesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/serviceregistry_mgmt/v1/registries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRegistriesCall(_callback);
        return localVarCall;

    }

    /**
     * Get the list of all registries.
     * 
     * @return List&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public List<Registry> getRegistries() throws ApiException {
        ApiResponse<List<Registry>> localVarResp = getRegistriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the list of all registries.
     * 
     * @return ApiResponse&lt;List&lt;Registry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registry>> getRegistriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRegistriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of all registries. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistriesAsync(final ApiCallback<List<Registry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Registry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistry
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;Registry&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryCall(String registryId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/serviceregistry_mgmt/v1/registries/{registryId}"
            .replaceAll("\\{" + "registryId" + "\\}", localVarApiClient.escapeString(registryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistryValidateBeforeCall(String registryId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'registryId' is set
        if (registryId == null) {
            throw new ApiException("Missing the required parameter 'registryId' when calling getRegistry(Async)");
        }
        

        okhttp3.Call localVarCall = getRegistryCall(registryId, _callback);
        return localVarCall;

    }

    /**
     * Get a Registry
     * Gets the details of a single instance of a &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @return Registry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;Registry&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public Registry getRegistry(String registryId) throws ApiException {
        ApiResponse<Registry> localVarResp = getRegistryWithHttpInfo(registryId);
        return localVarResp.getData();
    }

    /**
     * Get a Registry
     * Gets the details of a single instance of a &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @return ApiResponse&lt;Registry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;Registry&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Registry> getRegistryWithHttpInfo(String registryId) throws ApiException {
        okhttp3.Call localVarCall = getRegistryValidateBeforeCall(registryId, null);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Registry (asynchronously)
     * Gets the details of a single instance of a &#x60;Registry&#x60;.
     * @param registryId A unique identifier for a &#x60;Registry&#x60;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response - returns a single &#x60;Registry&#x60;. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response returned when something is requested but cannot be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The response sent from the server when an unexpected error occurs (for example  a database connection error). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryAsync(String registryId, final ApiCallback<Registry> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistryValidateBeforeCall(registryId, _callback);
        Type localVarReturnType = new TypeToken<Registry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
